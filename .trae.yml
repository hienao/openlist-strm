# Trae Rules for OpenList2Strm Project
name: "OpenList2Strm"
description: "A full-stack application for converting OpenList file lists to STRM streaming media files"
version: "1.0.11"

# Project architecture
architecture:
  type: "full-stack"
  pattern: "frontend-backend-separation"
  
  components:
    - name: "frontend"
      path: "frontend/"
      technology: "Nuxt.js 3.17.7"
      description: "Vue 3 + Tailwind CSS frontend application"
      port: 3000
    
    - name: "backend"
      path: "backend/"
      technology: "Spring Boot 3.3.9"
      description: "Java 21 REST API with MyBatis + Quartz"
      port: 8080

# Project structure
structure:
  - path: "frontend/"
    description: "Nuxt 3 frontend application"
    type: "directory"
    config: "frontend/.trae.yml"
  
  - path: "backend/"
    description: "Spring Boot backend API"
    type: "directory"
    config: "backend/.trae.yml"
  
  - path: "data/"
    description: "Data storage directory"
    type: "directory"
    optional: true
  
  - path: "docker-compose.yml"
    description: "Docker Compose configuration"
    type: "config"
  
  - path: "Dockerfile"
    description: "Main Docker configuration"
    type: "config"
  
  - path: "README.md"
    description: "Project documentation"
    type: "documentation"
  
  - path: "dev-start.sh"
    description: "Cross-platform development startup script"
    type: "script"
  
  - path: "dev-start.bat"
    description: "Windows development startup script"
    type: "script"
  
  - path: "dev-start.ps1"
    description: "PowerShell development startup script"
    type: "script"
  
  - path: "dev-stop.sh"
    description: "Cross-platform development stop script"
    type: "script"
  
  - path: "dev-logs.sh"
    description: "Advanced log viewing with multi-tail support"
    type: "script"
  
  - path: "dev-docker-rebuild.sh"
    description: "Complete Docker rebuild script"
    type: "script"
  
  - path: "docker-debug.sh"
    description: "Container debugging and setup script"
    type: "script"
  
  - path: "CLAUDE.md"
    description: "Claude Code development assistant configuration"
    type: "documentation"

# Development workflow
workflow:
  setup:
    - "Clone the repository"
    - "Quick start: ./dev-start.sh (Linux/macOS) or dev-start.bat (Windows)"
    - "Alternative: Install dependencies manually and use docker-compose up -d"
    - "Complete rebuild: ./dev-docker-rebuild.sh for clean Docker setup"
  
  development:
    - "Frontend runs on http://localhost:3000 with auto-reload"
    - "Backend API runs on http://localhost:8080 with auto-restart"
    - "Logs: ./dev-logs.sh [frontend|backend|both|status|clear]"
    - "Health checks and PID file management included"
  
  testing:
    - "Frontend: cd frontend && npm run test"
    - "Backend: cd backend && ./gradlew test"
    - "Code quality: cd backend && ./gradlew spotlessApply pmdMain jacocoTestReport"
  
  deployment:
    - "Docker Compose: docker-compose up -d (uses hienao6/openlist-strm:latest)"
    - "Source build: Complete rebuild with ./dev-docker-rebuild.sh"
    - "Multi-stage Docker build with frontend + backend + Nginx"
    - "Volume mappings: config, logs, STRM output directories"

# API communication
api:
  base_url:
    development: "http://localhost:8080"
    production: "/api"
  
  endpoints:
    - path: "/api/auth/**"
      description: "JWT authentication endpoints (login, register, logout)"
      controller: "AuthController"
    
    - path: "/api/openlist-config/**"
      description: "OpenList server configuration management"
      controller: "OpenListConfigController"
    
    - path: "/api/task-config/**"
      description: "STRM generation task management with Cron scheduling"
      controller: "TaskConfigController"
    
    - path: "/api/settings/**"
      description: "Application settings and preferences"
      controller: "SettingsController"
  
  proxy:
    development:
      from: "/api"
      to: "http://localhost:8080"

# Technology stack
technology:
  frontend:
    framework: "Nuxt.js 3.17.7"
    language: "JavaScript/TypeScript"
    ui_framework: "Vue 3 (Composition API)"
    styling: "Tailwind CSS"
    build_tool: "Vite"
    package_manager: "npm"
    runtime: "Node.js 20"
  
  backend:
    framework: "Spring Boot 3.3.9"
    language: "Java 21"
    build_tool: "Gradle 8.14.3"
    database: "SQLite 3.47.1"
    orm: "MyBatis"
    security: "Spring Security + JWT"
    migration: "Flyway"
    scheduler: "Quartz (RAM storage)"
    authentication: "JWT tokens in cookies"
  
  deployment:
    containerization: "Docker (multi-stage build)"
    orchestration: "Docker Compose"
    base_images: "Node.js 20 Alpine, Liberica JDK 21 Alpine"
    web_server: "Nginx (production)"
    registry: "Docker Hub (hienao6/openlist-strm)"

# Development guidelines
guidelines:
  general:
    - "Follow consistent code formatting"
    - "Write meaningful commit messages"
    - "Use proper error handling"
    - "Implement comprehensive logging"
    - "Write tests for critical functionality"
  
  frontend:
    - "Use Composition API with <script setup> syntax"
    - "Apply auth middleware to protected pages"
    - "Use $fetch for API calls with Bearer token authorization"
    - "Follow Tailwind CSS utility-first approach"
    - "Implement responsive design with mobile-first approach"
  
  backend:
    - "Follow Spring Boot conventions and layered architecture"
    - "Use @RestController for API endpoints"
    - "Implement business logic in @Service classes"
    - "Create MyBatis mappers for data access"
    - "Use @Valid for request validation"
    - "Follow Quartz scheduler patterns for task management"
    - "Use Flyway for database schema versioning"
  
  api:
    - "Use consistent response formats"
    - "Implement proper error responses"
    - "Use appropriate HTTP status codes"
    - "Include proper API documentation"

# Environment setup
environment:
  requirements:
    - "Node.js 20+ (for frontend development)"
    - "Java 21 (for backend development)"
    - "Docker (for containerized deployment)"
    - "Git (for version control)"
  
  development:
    frontend_port: 3000
    backend_port: 8080
    database: "SQLite (file-based at ./data/config/db/openlist2strm.db)"
    pid_files: ".frontend.pid, .backend.pid"
    log_files: "logs/frontend.log, logs/backend.log"
  
  production:
    container_port: 80
    exposed_port: 3111
    deployment: "Docker Compose"
    web_server: "Nginx (included in container)"
    volumes:
      - "./config:/app/data/config (database & config)"
      - "./logs:/app/data/log (application logs)"
      - "./strm:/app/backend/strm (STRM files output)"

# Scripts
scripts:
  - name: "dev-start.sh/.bat/.ps1"
    description: "Cross-platform development environment startup with health checks"
    usage: "./dev-start.sh (Linux/macOS), dev-start.bat (Windows)"
    features:
      - "Automatic dependency checking (Node.js/Java)"
      - "Health checks and startup confirmation"
      - "PID file management"
      - "Can run frontend-only if Java unavailable"
  
  - name: "dev-stop.sh/.bat/.ps1"
    description: "Graceful shutdown with process cleanup"
    usage: "./dev-stop.sh (Linux/macOS), dev-stop.bat (Windows)"
    features:
      - "Graceful process termination"
      - "Cleanup of residual processes"
      - "PID file cleanup"
  
  - name: "dev-logs.sh/.bat/.ps1"
    description: "Advanced log viewing with status checking"
    usage: "./dev-logs.sh [frontend|backend|both|status|clear]"
    features:
      - "Multi-tail log support"
      - "Service status checking"
      - "Log file clearing option"
      - "UTF-8 encoding support on Windows"
  
  - name: "dev-docker-rebuild.sh/.bat"
    description: "Complete Docker environment rebuild"
    usage: "./dev-docker-rebuild.sh"
    features:
      - "Removes all containers, images, volumes"
      - "Configures npm registry mirror"
      - "Clean rebuild from scratch"
  
  - name: "docker-debug.sh"
    description: "Comprehensive container debugging and setup"
    usage: "./docker-debug.sh"
    features:
      - "Docker daemon status check"
      - "Environment file validation"
      - "Directory creation and validation"
      - "Flyway migration file validation"
      - "Database cleanup options"

# Security considerations
security:
  authentication:
    - "JWT tokens stored in HTTP-only cookies"
    - "Configurable token expiration"
    - "Middleware-protected routes (auth.js, guest.js)"
    - "Bearer token authorization for API calls"
  
  api_security:
    - "CORS configuration with wildcard support for development"
    - "Input validation with @Valid annotations"
    - "SQL injection prevention through MyBatis prepared statements"
    - "Proper error handling without sensitive information exposure"
  
  deployment_security:
    - "No hardcoded secrets in code"
    - "Environment-based configuration"
    - "Secure volume mappings for data persistence"
    - "Network isolation in Docker Compose setup"
  
  data_protection:
    - "SQLite database with file-based storage"
    - "Configurable data report settings (can be disabled)"
    - "Anonymous usage statistics only (no personal data)"
    - "Privacy-focused AI scraping (optional feature)"