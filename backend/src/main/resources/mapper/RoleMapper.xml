<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hienao.openlist2strm.mapper.RoleMapper">

  <resultMap id="BaseResultMap" type="Role">
    <id column="id" property="id" jdbcType="BIGINT"/>
    <result column="code" property="code" jdbcType="VARCHAR"/>
    <result column="name" property="name" jdbcType="VARCHAR"/>
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
  </resultMap>

  <resultMap id="RoleWithPermissionsResultMap" type="Role" extends="BaseResultMap">
    <collection property="permissions" ofType="Permission">
      <id column="permission_id" property="id" jdbcType="BIGINT"/>
      <result column="permission_code" property="code" jdbcType="VARCHAR"/>
      <result column="permission_name" property="name" jdbcType="VARCHAR"/>
      <result column="permission_create_time" property="createTime" jdbcType="TIMESTAMP"/>
      <result column="permission_update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </collection>
  </resultMap>

  <select id="findById" resultMap="BaseResultMap">
    SELECT id, code, name, create_time, update_time
    FROM role
    WHERE id = #{id}
  </select>

  <select id="findByCode" resultMap="BaseResultMap">
    SELECT id, code, name, create_time, update_time
    FROM role
    WHERE code = #{code}
  </select>

  <select id="findByCodeIn" resultMap="BaseResultMap">
    SELECT id, code, name, create_time, update_time
    FROM role
    WHERE code IN
    <foreach item="code" collection="list" open="(" separator="," close=")">
      #{code}
    </foreach>
  </select>

  <select id="findByIdIn" resultMap="BaseResultMap">
    SELECT id, code, name, create_time, update_time
    FROM role
    WHERE id IN
    <foreach item="id" collection="list" open="(" separator="," close=")">
      #{id}
    </foreach>
  </select>

  <select id="findByIdWithPermissions" resultMap="RoleWithPermissionsResultMap">
    SELECT r.id, r.code, r.name, r.create_time, r.update_time,
           p.id as permission_id, p.code as permission_code, p.name as permission_name,
           p.create_time as permission_create_time, p.update_time as permission_update_time
    FROM role r
    LEFT JOIN role_permission_map rpm ON r.id = rpm.role_id
    LEFT JOIN permission p ON rpm.permission_id = p.id
    WHERE r.id = #{roleId}
  </select>

  <select id="findByCodeContainingAndNameContaining" resultMap="BaseResultMap">
    SELECT id, code, name, create_time, update_time
    FROM role
    <where>
      <if test="code != null and code != ''">
        code LIKE '%' || #{code} || '%'
      </if>
      <if test="name != null and name != ''">
        AND name LIKE '%' || #{name} || '%'
      </if>
    </where>
    LIMIT #{limit} OFFSET #{offset}
  </select>

  <select id="countByCodeContainingAndNameContaining" resultType="long">
    SELECT COUNT(*)
    FROM role
    <where>
      <if test="code != null and code != ''">
        code LIKE '%' || #{code} || '%'
      </if>
      <if test="name != null and name != ''">
        AND name LIKE '%' || #{name} || '%'
      </if>
    </where>
  </select>

  <insert id="save" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO role (code, name, create_time, update_time)
    VALUES (#{code}, #{name}, #{createTime}, #{updateTime})
  </insert>

  <update id="update">
    UPDATE role
    SET code = #{code},
        name = #{name},
        update_time = #{updateTime}
    WHERE id = #{id}
  </update>

  <delete id="deleteById">
    DELETE FROM role WHERE id = #{id}
  </delete>

  <select id="findAll" resultMap="BaseResultMap">
    SELECT id, code, name, create_time, update_time
    FROM role
  </select>

  <!-- 角色权限关系管理 -->
  <insert id="insertRolePermission">
    INSERT INTO role_permission_map (role_id, permission_id) 
    VALUES (#{roleId}, #{permissionId})
  </insert>

  <delete id="deleteRolePermissions">
    DELETE FROM role_permission_map WHERE role_id = #{roleId}
  </delete>

  <delete id="deleteRolePermission">
    DELETE FROM role_permission_map 
    WHERE role_id = #{roleId} AND permission_id = #{permissionId}
  </delete>

</mapper>