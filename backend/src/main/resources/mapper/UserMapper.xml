<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hienao.openlist2strm.mapper.UserMapper">

  <resultMap id="BaseResultMap" type="User">
    <id column="id" property="id" jdbcType="BIGINT"/>
    <result column="username" property="username" jdbcType="VARCHAR"/>
    <result column="password" property="password" jdbcType="VARCHAR"/>
    <result column="enable" property="enable" jdbcType="BOOLEAN"/>
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
  </resultMap>

  <resultMap id="UserWithRolesResultMap" type="User" extends="BaseResultMap">
    <collection property="roles" ofType="Role">
      <id column="role_id" property="id" jdbcType="BIGINT"/>
      <result column="role_code" property="code" jdbcType="VARCHAR"/>
      <result column="role_name" property="name" jdbcType="VARCHAR"/>
      <result column="role_create_time" property="createTime" jdbcType="TIMESTAMP"/>
      <result column="role_update_time" property="updateTime" jdbcType="TIMESTAMP"/>
      <collection property="permissions" ofType="Permission">
        <id column="permission_id" property="id" jdbcType="BIGINT"/>
        <result column="permission_code" property="code" jdbcType="VARCHAR"/>
        <result column="permission_name" property="name" jdbcType="VARCHAR"/>
        <result column="permission_create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="permission_update_time" property="updateTime" jdbcType="TIMESTAMP"/>
      </collection>
    </collection>
  </resultMap>

  <select id="findById" resultMap="BaseResultMap">
    SELECT id, username, password, enable, create_time, update_time
    FROM user
    WHERE id = #{id}
  </select>

  <select id="findByUsername" resultMap="BaseResultMap">
    SELECT id, username, password, enable, create_time, update_time
    FROM user
    WHERE username = #{username}
  </select>

  <select id="existsByUsername" resultType="boolean">
    SELECT COUNT(*) > 0
    FROM user
    WHERE username = #{username}
  </select>

  <select id="findByIdWithRolesAndPermissions" resultMap="UserWithRolesResultMap">
    SELECT u.id, u.username, u.password, u.enable, u.create_time, u.update_time,
           r.id as role_id, r.code as role_code, r.name as role_name, 
           r.create_time as role_create_time, r.update_time as role_update_time,
           p.id as permission_id, p.code as permission_code, p.name as permission_name,
           p.create_time as permission_create_time, p.update_time as permission_update_time
    FROM user u
    LEFT JOIN user_role_map urm ON u.id = urm.user_id
    LEFT JOIN role r ON urm.role_id = r.id
    LEFT JOIN role_permission_map rpm ON r.id = rpm.role_id
    LEFT JOIN permission p ON rpm.permission_id = p.id
    WHERE u.id = #{userId}
  </select>

  <select id="findByUsernameContaining" resultMap="BaseResultMap">
    SELECT id, username, password, enable, create_time, update_time
    FROM user
    <where>
      <if test="username != null and username != ''">
        username LIKE '%' || #{username} || '%'
      </if>
    </where>
    LIMIT #{limit} OFFSET #{offset}
  </select>

  <select id="countByUsernameContaining" resultType="long">
    SELECT COUNT(*)
    FROM user
    <where>
      <if test="username != null and username != ''">
        username LIKE '%' || #{username} || '%'
      </if>
    </where>
  </select>

  <insert id="save" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO user (username, password, enable, create_time, update_time)
    VALUES (#{username}, #{password}, #{enable}, #{createTime}, #{updateTime})
  </insert>

  <update id="update">
    UPDATE user
    SET username = #{username},
        password = #{password},
        enable = #{enable},
        update_time = #{updateTime}
    WHERE id = #{id}
  </update>

  <delete id="deleteById">
    DELETE FROM user WHERE id = #{id}
  </delete>

  <select id="findAll" resultMap="BaseResultMap">
    SELECT id, username, password, enable, create_time, update_time
    FROM user
  </select>

  <!-- 用户角色关系管理 -->
  <insert id="insertUserRole">
    INSERT INTO user_role_map (user_id, role_id) 
    VALUES (#{userId}, #{roleId})
  </insert>

  <delete id="deleteUserRoles">
    DELETE FROM user_role_map WHERE user_id = #{userId}
  </delete>

  <delete id="deleteUserRole">
    DELETE FROM user_role_map 
    WHERE user_id = #{userId} AND role_id = #{roleId}
  </delete>

</mapper>