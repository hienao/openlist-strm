# Trae Rules for Backend (Spring Boot Project)
name: "OpenList2Strm Backend"
description: "Spring Boot backend API for OpenList2Strm"

# Project structure
structure:
  # Build files
  - path: "build.gradle.kts"
    description: "Gradle build configuration"
    type: "config"
  
  - path: "settings.gradle.kts"
    description: "Gradle settings"
    type: "config"
  
  - path: "gradle.properties"
    description: "Gradle properties"
    type: "config"
  
  # Source code structure
  - path: "src/main/java/com/hienao/openlist2strm/"
    description: "Main Java source code"
    type: "directory"
    structure:
      - path: "ApplicationService.java"
        description: "Main Spring Boot application class"
        type: "application"
      
      - path: "controller/"
        description: "REST API controllers"
        type: "directory"
        patterns:
          - "*Controller.java"
      
      - path: "service/"
        description: "Business logic services"
        type: "directory"
        patterns:
          - "*Service.java"
      
      - path: "repository/"
        description: "Data access layer"
        type: "directory"
        patterns:
          - "*Repository.java"
      
      - path: "mapper/"
        description: "MyBatis mappers"
        type: "directory"
        patterns:
          - "*Mapper.java"
      
      - path: "entity/"
        description: "JPA entities"
        type: "directory"
        patterns:
          - "*.java"
      
      - path: "dto/"
        description: "Data Transfer Objects"
        type: "directory"
        patterns:
          - "*Dto.java"
      
      - path: "config/"
        description: "Configuration classes"
        type: "directory"
        patterns:
          - "*Config.java"
      
      - path: "exception/"
        description: "Exception handling"
        type: "directory"
        patterns:
          - "*Exception.java"
          - "*Handler.java"
      
      - path: "model/"
        description: "Domain models and enums"
        type: "directory"
      
      - path: "component/"
        description: "Spring components"
        type: "directory"
      
      - path: "job/"
        description: "Scheduled jobs"
        type: "directory"
        patterns:
          - "*Job.java"
  
  # Test structure
  - path: "src/test/java/"
    description: "Test source code"
    type: "directory"
    optional: true
  
  # Resources
  - path: "src/main/resources/"
    description: "Application resources"
    type: "directory"
    structure:
      - path: "application.yml"
        description: "Spring Boot configuration"
        type: "config"
        optional: true
      - path: "application.properties"
        description: "Spring Boot configuration"
        type: "config"
        optional: true
      - path: "db/migration/"
        description: "Flyway database migrations"
        type: "directory"
        optional: true

# File patterns and conventions
patterns:
  # Controllers
  - pattern: "**/*Controller.java"
    description: "REST API controllers"
    rules:
      - "Use @RestController annotation"
      - "Use @RequestMapping for base path"
      - "Use proper HTTP method annotations (@GetMapping, @PostMapping, etc.)"
      - "Include proper validation annotations"
      - "Return ResponseEntity for consistent responses"
      - "Use PascalCase class names ending with 'Controller'"
  
  # Services
  - pattern: "**/*Service.java"
    description: "Business logic services"
    rules:
      - "Use @Service annotation"
      - "Implement business logic, not data access"
      - "Use @Transactional for database operations"
      - "Use PascalCase class names ending with 'Service'"
  
  # Repositories
  - pattern: "**/*Repository.java"
    description: "Data access repositories"
    rules:
      - "Use @Repository annotation"
      - "Extend appropriate Spring Data interfaces"
      - "Use PascalCase class names ending with 'Repository'"
  
  # Mappers (MyBatis)
  - pattern: "**/*Mapper.java"
    description: "MyBatis mappers"
    rules:
      - "Use @Mapper annotation"
      - "Define SQL operations"
      - "Use PascalCase class names ending with 'Mapper'"
  
  # Entities
  - pattern: "**/entity/*.java"
    description: "JPA entities"
    rules:
      - "Use @Entity annotation"
      - "Include @Id for primary key"
      - "Use proper JPA annotations"
      - "Use PascalCase class names"
  
  # DTOs
  - pattern: "**/*Dto.java"
    description: "Data Transfer Objects"
    rules:
      - "Use for API request/response"
      - "Include validation annotations"
      - "Use PascalCase class names ending with 'Dto'"
  
  # Configuration
  - pattern: "**/*Config.java"
    description: "Configuration classes"
    rules:
      - "Use @Configuration annotation"
      - "Use @Bean for bean definitions"
      - "Use PascalCase class names ending with 'Config'"
  
  # Exceptions
  - pattern: "**/*Exception.java"
    description: "Custom exceptions"
    rules:
      - "Extend appropriate exception classes"
      - "Include proper constructors"
      - "Use PascalCase class names ending with 'Exception'"

# Development guidelines
guidelines:
  - "Follow Spring Boot best practices"
  - "Use proper dependency injection"
  - "Implement proper error handling"
  - "Use appropriate HTTP status codes"
  - "Include comprehensive logging"
  - "Write unit and integration tests"
  - "Use proper security configurations"
  - "Follow RESTful API design principles"
  - "Use proper database transaction management"
  - "Implement proper validation"

# Dependencies
dependencies:
  required:
    - "org.springframework.boot:spring-boot-starter-web"
    - "org.springframework.boot:spring-boot-starter-security"
    - "org.springframework.boot:spring-boot-starter-validation"
    - "org.mybatis.spring.boot:mybatis-spring-boot-starter"
  
  database:
    - "org.xerial:sqlite-jdbc"
    - "org.flywaydb:flyway-core"
  
  utilities:
    - "org.apache.commons:commons-lang3"
    - "org.apache.commons:commons-collections4"
    - "com.auth0:java-jwt"
    - "org.projectlombok:lombok"
  
  testing:
    - "org.springframework.boot:spring-boot-starter-test"
    - "org.springframework.security:spring-security-test"
    - "org.testcontainers:junit-jupiter"

# Build and deployment
build:
  tool: "gradle"
  java_version: "21"
  output: "build/libs/openlisttostrm.jar"
  commands:
    build: "./gradlew build"
    test: "./gradlew test"
    run: "./gradlew bootRun"
    clean: "./gradlew clean"

# Code quality
code_quality:
  tools:
    - name: "PMD"
      config: "pmd-rules.xml"
    - name: "Spotless"
      description: "Code formatting"
    - name: "JaCoCo"
      description: "Code coverage"

# Environment
environment:
  java_version: "21"
  spring_boot_version: "3.3.9"
  database: "SQLite"
  port: 8080

# API Response Format Rules
api_response:
  format:
    description: "Unified API response format for all endpoints"
    structure:
      code: "HTTP status code (int)"
      message: "Response message (string)"
      data: "Response data (generic type T, can be null)"
    
  rules:
    - "All API endpoints MUST return ApiResponse<T> format"
    - "Success responses use code 200 with appropriate data"
    - "Error responses use appropriate HTTP status codes (400, 401, 403, 500)"
    - "Use ApiResponse.success(data, message) for successful operations"
    - "Use ApiResponse.error(code, message) for error responses"
    - "Data field type is flexible based on endpoint requirements"
    - "Message field should provide clear, user-friendly descriptions"
    
  examples:
    success:
      login: |
        {
          "code": 200,
          "data": {
            "token": "jwt_token_here",
            "username": "admin",
            "expiresAt": "2024-01-01T00:00:00Z"
          },
          "message": "登录成功"
        }
      list: |
        {
          "code": 200,
          "data": {
            "items": [...],
            "total": 10
          },
          "message": "获取列表成功"
        }
    
    error:
      validation: |
        {
          "code": 400,
          "data": null,
          "message": "参数验证失败: 用户名不能为空"
        }
      authentication: |
        {
          "code": 401,
          "data": null,
          "message": "认证失败，请先登录"
        }
      authorization: |
        {
          "code": 403,
          "data": null,
          "message": "访问被拒绝，权限不足"
        }
      server_error: |
        {
          "code": 500,
          "data": null,
          "message": "系统错误"
        }
  
  implementation:
    class: "com.hienao.openlist2strm.dto.ApiResponse<T>"
    location: "src/main/java/com/hienao/openlist2strm/dto/ApiResponse.java"
    usage:
      - "Import ApiResponse in all controller classes"
      - "Return ApiResponse<T> from all controller methods"
      - "Use in global exception handlers"
      - "Apply to security-related handlers"
    
  enforcement:
    - "All new endpoints must follow this format"
    - "Existing endpoints should be migrated gradually"
    - "Code reviews must verify compliance"
    - "Integration tests should validate response format"